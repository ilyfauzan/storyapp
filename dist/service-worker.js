const CACHE_NAME="story-spa-shell-v3",API_CACHE_NAME="story-spa-api-v2",SHELL_ASSETS=["/","/index.html","/bundle.js","/manifest.json","/icons/icon-96x96.png","/icons/icon-144x144.png","/icons/icon-152x152.png","/icons/icon-512x512.png","https://unpkg.com/leaflet@1.9.4/dist/leaflet.css","https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"];let isUpdating=!1;function isShellAsset(e){return SHELL_ASSETS.some((t=>{if(t.startsWith("http"))return e===t;{const s=e.split("?")[0];return s===t||s.endsWith(t)}}))}async function handleAPIWrite(e,t){try{const s=await fetch(e);if(s.ok){const s=await caches.open(API_CACHE_NAME);await s.delete("https://story-api.dicoding.dev/v1/stories"),t.pathname.startsWith("/v1/stories/")&&await s.delete(e.url),console.log("[SW] 🔄 Cache invalidated after write operation")}return s}catch(e){return console.log("[SW] 📵 Write operation failed - offline"),new Response(JSON.stringify({error:!0,message:"Gagal melakukan operasi. Anda sedang offline."}),{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"application/json"}})}}async function cacheFirstStrategy(e){try{const t=await caches.match(e);if(t)return console.log("[SW] 📦 Serving from cache:",e.url),fetch(e).then((t=>{t.ok&&caches.open(CACHE_NAME).then((s=>{s.put(e,t),console.log("[SW] 🔄 Background updated:",e.url)}))})).catch((()=>{})),t;const s=await fetch(e);return s.ok&&((await caches.open(CACHE_NAME)).put(e,s.clone()),console.log("[SW] 💾 Cached new asset:",e.url)),s}catch(t){return console.error("[SW] ❌ Cache first strategy failed:",e.url,t),e.url.includes(".js")?new Response('console.error("Service Worker: Failed to load script");',{status:503,headers:{"Content-Type":"application/javascript"}}):new Response("Offline - Resource not available",{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"text/plain"}})}}async function networkFirstWithOfflinePage(e){try{const t=await fetch(e);return t.ok&&((await caches.open(API_CACHE_NAME)).put(e,t.clone()),console.log("[SW] 💾 API response cached:",e.url)),t}catch(t){console.log("[SW] 📵 Network failed, checking cache for:",e.url);const s=await caches.match(e);return s?(console.log("[SW] 📦 Serving cached API response"),s):e.url.includes("/stories")?new Response(JSON.stringify({error:!1,message:"Mode offline - Menggunakan data tersimpan",listStory:[]}),{status:200,statusText:"OK",headers:{"Content-Type":"application/json","X-Offline":"true"}}):new Response(JSON.stringify({error:!0,message:"Offline - Fitur tidak tersedia saat offline"}),{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"application/json"}})}}self.addEventListener("push",(e=>{const t=e.data?e.data.json():{},s=t.title||"Notifikasi Baru",n=t.options||{body:"Ada pesan baru!",icon:"/icons/icon-96x96.png",badge:"/icons/icon-96x96.png"};e.waitUntil(self.registration.showNotification(s,n))})),self.addEventListener("install",(e=>{console.log(`[SW] Installing Service Worker - ${CACHE_NAME}`),e.waitUntil(caches.open(CACHE_NAME).then((async e=>{console.log("[SW] Caching Application Shell assets");for(const t of SHELL_ASSETS)try{const s=new Request(t,{mode:t.startsWith("http")?"cors":"same-origin",cache:"reload"}),n=await fetch(s);n.ok?(await e.put(s,n),console.log("[SW] ✅ Cached:",t)):console.warn("[SW] ⚠️ Failed to cache (not found):",t,n.status)}catch(e){console.warn("[SW] ❌ Failed to cache (error):",t,e.message)}if(console.log("[SW] 🎉 Application Shell caching completed"),0===(await self.clients.matchAll()).length)return self.skipWaiting();console.log("[SW] 🕐 Waiting for clients to close before updating...")})).catch((e=>{throw console.error("[SW] ❌ Failed to open cache:",e),e})))})),self.addEventListener("activate",(e=>{console.log(`[SW] Activating Service Worker - ${CACHE_NAME}`),isUpdating=!0,e.waitUntil(Promise.all([caches.keys().then((e=>Promise.all(e.map((e=>{if(e!==CACHE_NAME&&e!==API_CACHE_NAME)return console.log("[SW] 🗑️ Deleting old cache:",e),caches.delete(e)}))))),new Promise((e=>setTimeout(e,100)))]).then((()=>(console.log("[SW] ✅ Service Worker activated - Ready for offline"),isUpdating=!1,self.clients.claim()))).then((()=>self.clients.matchAll().then((e=>{e.forEach((e=>{e.postMessage({type:"SW_UPDATED",message:"Service Worker updated successfully"})}))})))))})),self.addEventListener("fetch",(e=>{if(isUpdating)return void console.log("[SW] ⏸️ Skipping fetch during update:",e.request.url);const t=e.request,s=new URL(t.url);"https://story-api.dicoding.dev"===s.origin&&["POST","PUT","DELETE"].includes(t.method)?e.respondWith(handleAPIWrite(t,s)):"https://story-api.dicoding.dev"!==s.origin||"GET"!==t.method?isShellAsset(t.url)?e.respondWith(cacheFirstStrategy(t)):e.respondWith(fetch(t)):e.respondWith(networkFirstWithOfflinePage(t))})),self.addEventListener("message",(e=>{e.data&&"SKIP_WAITING"===e.data.type&&(console.log("[SW] 🚀 Manual skipWaiting triggered"),self.skipWaiting())}));